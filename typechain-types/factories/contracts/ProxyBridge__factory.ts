/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ProxyBridge,
  ProxyBridgeInterface,
} from "../../contracts/ProxyBridge";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensBurnt",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensMinted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_requester",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burnTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_requester",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061017e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630d1118ce1461003b578063f0dda65c14610050575b600080fd5b61004e610049366004610103565b610063565b005b61004e61005e366004610103565b6100b7565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f22d306e0cdbeeb823d6327362b35337dc3125a6aa905b6a014da1b08a5389ba491015b60405180910390a15050565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f3f2c9d57c068687834f0de942a9babb9e5acab57d516d3480a3c16ee165a427391016100ab565b6000806040838503121561011657600080fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811461013a57600080fd5b94602093909301359350505056fea2646970667358221220ed7c23c16f820bcf3f6bc8c12463d5b17774553702c6b5fc33b36ecc1c11aeeb64736f6c634300080a0033";

type ProxyBridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyBridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProxyBridge__factory extends ContractFactory {
  constructor(...args: ProxyBridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProxyBridge> {
    return super.deploy(overrides || {}) as Promise<ProxyBridge>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ProxyBridge {
    return super.attach(address) as ProxyBridge;
  }
  override connect(signer: Signer): ProxyBridge__factory {
    return super.connect(signer) as ProxyBridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyBridgeInterface {
    return new utils.Interface(_abi) as ProxyBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProxyBridge {
    return new Contract(address, _abi, signerOrProvider) as ProxyBridge;
  }
}
